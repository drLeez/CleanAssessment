@using CleanAssessment.Helpers
@using Microsoft.AspNetCore.Components.Rendering
@inherits MudNavLink
@inject ICookieHelper _cookieHelper

<MudStack Row Spacing="0">
    @((RenderTreeBuilder builder) => base.BuildRenderTree(builder))
    <MudSpacer />
    <div class="fav-link" onclick="@(async () => await ToggleFav())">
        <MudIcon Icon="@(IsFavorited ? @Icons.Material.Filled.Star : @Icons.Material.Filled.StarBorder)"
                 Style="margin: auto"
                 Color="Color.Warning"
                 Size="Size.Small"/>
    </div>
</MudStack>

@code {
    [Parameter, EditorRequired]
    public required string Title { get; set; }
    [Parameter]
    public bool IsFavorited { get; set; } = false;

    public static readonly Dictionary<string, string> LinkToTitles = new();
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Href) && !string.IsNullOrEmpty(Title))
        {
            LinkToTitles[Href] = Title;
        }
    }

    private async Task ToggleFav()
    {
        IsFavorited = !IsFavorited;
        await WriteFavsToCookie();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (!first) return;
        await base.OnAfterRenderAsync(first);
        Links.Add(this);
    }

    public static readonly HashSet<FavNavLink> Links = new();
    public static IEnumerable<FavNavLink> Favorites => Links.Where(x => x.IsFavorited);
    public async Task ReadFavsFromCookie()
    {
        var faveString = await _cookieHelper.GetCookie("favoriteLinks");
        if (!string.IsNullOrEmpty(faveString))
        {
            var faves = faveString.Split(',');
            foreach (var fave in faves)
            {
                var first = Links.FirstOrDefault(x => x.Title == fave);
                if (first != null)
                {
                    first.IsFavorited = true;
                }
            }
        }
    }
    private async Task WriteFavsToCookie()
    {
        List<string> list = new();
        foreach (var link in Favorites)
        {
            list.Add(link.Title);
        }
        await _cookieHelper.SetCookie("favoriteLinks", string.Join(',', list));
    }
}
